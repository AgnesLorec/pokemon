# -*- coding: utf-8 -*-
"""AL_Challenge_Pokemon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p5WprumTsSwsde9OkS4Da8VOCe6hJS6p

#Import des bibliothèques
"""

import pandas as pd

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import StandardScaler

import seaborn as sns
import matplotlib.pyplot as plt

"""#Import de la DB"""

from google.colab import drive
drive.mount('/content/drive')

df_pokemon = pd.read_csv('/content/drive/MyDrive/Python/Machine learning/pokemon.csv')

df_pokemon.sample(8)

"""#Etude de la DB source"""

df_pokemon.info()

df_pokemon.describe(include='all')

df_pokemon.corr()

df_pokemon['Legendary'].sum()
#There are 65 legendary pokemon

df_pokemon['Type 1'].value_counts()

len(df_pokemon['Type 1'].value_counts())
#18 catégories de type 1

len(df_pokemon['Type 1'][df_pokemon['Legendary'] == True].value_counts())
#15 catégories ont des pokemons Légendaires

df_pokemon['Type 2'].value_counts()

"""#Traitement des données

Type 2 : transformer en 0 ou 1 -> get dummies car plus de 2 références

HP,	Attack,	Defense,	Sp. Atk,	Sp. Def,	Speed -> standardisation des données

Generation : transformer en 0 ou 1 -> get dummies car plus de 2 références

Legendary : transformer en 0 ou 1 -> True = 1 et False = 0
"""

df_pokemon_c = df_pokemon.dropna(subset=['Name'])

df_pokemon_c.reset_index(inplace=True)

df_pokemon_c.info()

# #Type 1 : transformer en 0 ou 1 = devient notre cible (y)
df_type1 = df_pokemon_c['Type 1'].str.get_dummies()

#df_type1.info()

# #Type 2 : transformer en 0 ou 1 -> get dummies car plus de 2 références
df_type2 = df_pokemon_c['Type 2'].str.get_dummies()

columns_name = df_type2.columns

for name in columns_name :
  df_type2.rename(columns={name : 'T2_' + name},inplace=True)

#df_type2.info()

# #HP	Attack	Defense	Sp. Atk	Sp. Def	Speed -> standardisation des données
nb_car = ['HP',	'Attack',	'Defense',	'Sp. Atk', 'Sp. Def', 'Speed']
X_nb_car = df_pokemon_c[nb_car]

scaler = StandardScaler().fit(X_nb_car)

X_nb_car_scaled = scaler.transform(X_nb_car)

df_nb_car = pd.DataFrame(X_nb_car_scaled,columns=nb_car)

#df_nb_car.info()

# #Generation : transformer en 0 ou 1 -> get dummies car plus de 2 références
df_generation = df_pokemon_c['Generation'].astype('str').str.get_dummies()

columns_name = df_generation.columns

for name in columns_name :
  df_generation.rename(columns={name : 'Generation_' + name},inplace=True)

#df_generation

# #Legendary : transformer en 0 ou 1 -> True = 1 et False = 0
df_legendary = df_pokemon_c['Legendary'].apply(lambda x : 1 if x == True else 0)

#df_legendary

df_pokemon_AL = pd.concat([df_pokemon_c['Name'],df_type1, df_type2, df_nb_car, df_generation, df_legendary],axis=1)

df_pokemon_AL.head()

"""#Création du modèle Knn sans les légendaires

Je retire les légendaires du modèle car ils ne doivent pas ressortir dans les propositions de mon modèle
"""

df_pokemon_AL_without_lengendary = df_pokemon_AL[df_pokemon_AL['Legendary'] == 0]
df_pokemon_AL_without_lengendary.drop(columns='Legendary',inplace=True)

#df_pokemon_AL_without_lengendary.info()

X_list = list(df_pokemon_AL_without_lengendary.columns)
X_list.remove('Name')

#X_list

X = df_pokemon_AL_without_lengendary[X_list]
y = df_pokemon_AL_without_lengendary['Name']

#je cherche le pokemon le plus proche, je ne cherche pas à classifier en tant que tel mon pokemon.
##j'ai donc seulement besoin du plus proche voisin
model_KNN = KNeighborsClassifier(n_neighbors=1,weights='distance')

model_KNN.fit(X, y)

def substitut_pokemon(poke_source):
  X_poke_source = df_pokemon_AL[X_list][df_pokemon_AL['Name'] == poke_source]
  list_X_poke_source = list(X_poke_source.iloc[0])
  distance, classement = model_KNN.kneighbors([list_X_poke_source])
  classement_condition =  classement[0]
  df_classement = df_pokemon_AL_without_lengendary.iloc[classement_condition]
  df_classement.reset_index(drop=True, inplace=True)
  df_classement['Classement'] = [1] #10,9,8,7,6,5,4,3, 2,
  pokemon_substitut = df_classement['Name'].iloc[0]
  return pokemon_substitut

substitut_pokemon('Lugia')

print('The best subsitute for the lengendary pokemon', pokemon, 'is', substitut_pokemon('Lugia'), '.')

list_replace_pokemon = ['Mewtwo', 'Lugia', 'Rayquaza', 'Giratina Altered Forme', 'Giratina Origin Forme', 'Dialga', 'Palkia']

#substitut_pokemon('Dialga')

for pokemon in list_replace_pokemon :
  print('The best subsitute for the lengendary pokemon', pokemon, 'is', substitut_pokemon(pokemon), '.')
print()
